plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'jacoco'
    id 'java'
    id 'org.sonarqube' version '3.3'
}

ext {
    springCloudVersion = "2020.0.4"
    springBootVersion = '2.5.3'
    jacocoVersion = '0.8.7'
}

ext['log4j2.version'] = '2.17.1'

subprojects {
    apply {
        plugin 'java'
        plugin 'org.springframework.boot'
        plugin 'io.spring.dependency-management'
        plugin 'jacoco'
        plugin 'org.sonarqube'
    }

    sourceCompatibility = 11
    group = 'com.yapp'
    version = '1.0.2'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jacoco {
        toolVersion = "$jacocoVersion"
    }

    jacocoTestReport {
        dependsOn test // 리포트가 만들어지기 전 테스트 실행되어야 한다.
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, // 리포트 결과에 제외시킬 디렉토리
                                exclude: [
                                        '**/LocalConfig*',
                                        '**/SharefoodApplication*',
                                        '**/OrderByNull*',
                                        '**/*S3*',
                                        "**.*Dto*",
                                        '**/MockData*'
                                ] + Qdomains
                        )
                    })

            )
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.projectKey", "shared-food"
            property "sonar.organization", "shared-food"
            property "sonar.login", "c81e288e2a807a58d2f52bc8e7d2a21d96b94430"
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.test.inclusions", "**/*Test.java"
            property "sonar.exclusions", "**/*Test*.*, **/Q*.JAVA, **.*Dto*"
//        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/testCoverage/testCoverage.xml"
            property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }


//    sourceSets {
//        integrationTest {
//            compileClasspath += main.output + test.output
//            runtimeClasspath += main.output + test.output
//        }
//    }
//
//    task unitTest(type: Test, group: "verification", description: "Execute Unit Tests") {
//        useJUnitPlatform()
//        jacoco {
//            destinationFile = file("$buildDir/jacoco/unitTest.exec")
//        }
//    }
//
//    task ci(type: Test, group: "verification", description: "CI") {
//        dependsOn unitTest
//        finalizedBy jacocoTestReport
//    }
//
//    test {
//        dependsOn unitTest
//    }
}

//sonarqube {
//    properties {
//        property "sonar.host.url", "https://sonarcloud.io"
//        property "sonar.projectKey", "shared-food"
//        property "sonar.organization", "shared-food"
//        property "sonar.login", "c81e288e2a807a58d2f52bc8e7d2a21d96b94430"
//        property "sonar.java.coveragePlugin", "jacoco"
//        property "sonar.test.inclusions", "**/*Test.java"
//        property "sonar.exclusions", "**/*Test*.*, **/Q*.JAVA, **.*Dto*"
////        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/testCoverage/testCoverage.xml"
//        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
//    }
//}
//
//jacoco {
//    toolVersion = "$jacocoVersion"
//}

//task testCoverage(type: JacocoReport, group: "verification", description: "Report Test Coverage") {
//    executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))
//
//    subprojects.forEach {
//        sourceSets(it.sourceSets.main as SourceSet)
//    }
//
//    reports {
//        html.enabled true
//        xml.enabled true
//        csv.enabled false
//    }
//}